import { ActivateMessaging, RemoteMessageHandler, ShowNextHandshake } from "./ui-interaction.js";
import { Peer } from "./module/peer.js";

/** A handle to the Peer object in-use */
let peer;
/** Is a handshake currently being exchanged between hosts */
let currentlyProcessingHandshake = false;

/** Provide handlers for inbound messages and outbound connections */
function attachDataChannelHandlers() {
    peer.dataChannel.onInboundMessage = RemoteMessageHandler;

    // When the outbound channel is opened for this connection
    peer.dataChannel.outbound.get(`default`).onOpen = (evt) => {
        const channel = evt.target;

        if (channel.readyState == `open`) {
            // Clear any unused handshake values
            peer.generatedHandshakes.splice(0, peer.generatedHandshakes.length);

            ActivateMessaging();
        }
    };
}

/** Create a new peer object, and hook into newly generated negotiation values */
function configurePeer() {
    peer = new Peer();

    // Handle newly created handshake values
    peer.onGeneratedHandshake = () => {
        currentlyProcessingHandshake = ShowNextHandshake({ currentlyProcessingHandshake, generatedHandshakes: peer.generatedHandshakes })
    };
}

/** Handle negotiation values generated by the remote host */
async function consumeRemoteHandshake({ rawHandshake }) {
    if (rawHandshake.length > 0) {
        // When consuming the initial RTC offer, this browser will not have a peer yet
        if (!peer)
            configurePeer();

        peer.ConsumeHandshake(rawHandshake);
        attachDataChannelHandlers();

        currentlyProcessingHandshake = ShowNextHandshake({ currentlyProcessingHandshake: false, generatedHandshakes: peer.generatedHandshakes });
    }
}

/** Start the peer negotiation process */
async function startConnection() {
    currentlyProcessingHandshake = false;
    await peer.InitiateConnection();
    attachDataChannelHandlers();
}

/** Send data through a peer's outbound data channel */
function sendChatMessage(text) {
    peer.dataChannel.Send(text);
}

export {
    configurePeer as ConfigurePeer,
    consumeRemoteHandshake as ConsumeRemoteHandshake,
    sendChatMessage as SendChatMessage,
    startConnection as StartConnection,
};
