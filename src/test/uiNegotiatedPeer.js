import { Peer } from "./module/peer.js";
import { PeerConnectionUI } from "./ui-interaction.js";
import socket from "./socket.js";

/** Is a handshake from this host currently being processed by the remote */
const _ui = new WeakMap();

/** A Peer Connection Manager designed to negotiate the connection via manually sending handshakes */
class UINegotiatedPeer extends Peer {
    constructor() {
        // Instantiate with the default data channel named "message"
        super({ defaultDataChannel: `message` });

        // Add the UI for this connection
        _ui.set(
            this,
            new PeerConnectionUI({
                StartConnection: () => this.StartConnectionProcess(),
                ConsumeRemoteHandshake: params => this.ConsumeRemoteHandshake(params),
                SendChatMessage: text => this.dataChannel.Send(text, `message`),
                SendTypingStatus: status => this.dataChannel.Send(status, `typing-status`),
            })
        );

        // Add a second data channel called "typing-status"
        this.dataChannel.AddOutboundChannel(`typing-status`);

        // Handle newly created handshake values
        this.onGeneratedHandshake = handshake => {
            // socket.send(handshake);
            socket.emit('message', handshake);
            this.ui.ShowNextHandshake(handshake);
        }
        socket.on('message',(payload)=>{
            if (payload.search(/fromId/) >= 0)
            this.ConsumeRemoteHandshake({ rawHandshake: payload });
        });


        // socket.onmessage = msg => {
        //     if (msg.data.search(/fromId/) >= 0)
        //         this.ConsumeRemoteHandshake({ rawHandshake: msg.data });
        // };

        // Respond to Inbound messages
        this.dataChannel.AddInboundMessageHandler(`typing-status`, evt => this.ui.TypingStatusUpdate(evt));
        this.dataChannel.AddInboundMessageHandler(`message`, evt => this.ui.TextMessageReceived(evt));

        // When the outbound channel is opened for this connection
        this.dataChannel.outbound.get(`message`).onOpen = (evt) => {
            const channel = evt.target;

            if (channel.readyState == `open`)
                // Display the chat UI
                this.ui.ActivateMessaging();
        };
    }

    get ui() { return _ui.get(this); }

    /*
     * --------------------------------------------------------------
     * Public Methods
     * --------------------------------------------------------------
     */

    /** Handle negotiation values generated by the remote host */
    async ConsumeRemoteHandshake({ rawHandshake }) {
        if (rawHandshake.length > 0) {
            try {
                await this.ConsumeHandshake(rawHandshake);
            } catch (err) {
                if (err.name == `SAME ORIGIN HANDSHAKE`)
                    alert(err.message);
                else
                    throw err;
            }
        }
    }

    /** Start the negotiation process for a new connection */
    async StartConnectionProcess() {
        await this.InitiateConnection();
    }

    /* -------------------------------------------------------------- */
}

export {
    UINegotiatedPeer,
};
