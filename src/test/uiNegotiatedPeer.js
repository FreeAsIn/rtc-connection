import { Peer } from "./module/peer.js";
import { ActivateMessaging, HookUI, RemoteMessageHandler, ShowNextHandshake } from "./ui-interaction.js";

/** Is a handshake from this host currently being processed by the remote */
const _runState = new WeakMap();

/** A Peer Connection Manager designed to negotiate the connection via manually sending handshakes */
class UINegotiatedPeer extends Peer {
    constructor() {
        // Instantiate with the default data channel named "message"
        super({ defaultDataChannel: `message` });

        // Add a second data channel called "typing-status"
        this.dataChannel.AddOutboundChannel(`typing-status`);

        // Track the handshake negotiation on the remote side
        _runState.set(this, { currentlyProcessingHandshake: false });

        // Handle newly created handshake values
        this.onGeneratedHandshake = () => {
            ShowNextHandshake({
                runState: _runState.get(this),
                generatedHandshakes: this.generatedHandshakes,
            });
        };

        // Respond to Inbound messages
        this.dataChannel.onInboundMessage = RemoteMessageHandler;

        // When the outbound channel is opened for this connection
        this.dataChannel.outbound.get(`message`).onOpen = (evt) => {
            const channel = evt.target;

            if (channel.readyState == `open`) {
                // Clear any unused handshake values
                this.generatedHandshakes.splice(0, this.generatedHandshakes.length);

                // Display the chat UI
                ActivateMessaging();
            }
        };

        // Attach handlers to the UI
        HookUI({
            StartConnection: () => this.StartConnectionProcess(),
            ConsumeRemoteHandshake: params => this.ConsumeRemoteHandshake(params),
            SendChatMessage: text => this.dataChannel.Send(text, `message`),
            SendTypingStatus: status => this.dataChannel.Send(status, `typing-status`),
        });
    }

    /*
     * --------------------------------------------------------------
     * Public Methods
     * --------------------------------------------------------------
     */

    /** Handle negotiation values generated by the remote host */
    async ConsumeRemoteHandshake({ rawHandshake }) {
        if (rawHandshake.length > 0) {
            _runState.get(this).currentlyProcessingHandshake = false;

            await this.ConsumeHandshake(rawHandshake);

            ShowNextHandshake({
                runState: _runState.get(this),
                generatedHandshakes: this.generatedHandshakes,
            });
        }
    }

    /** Start the negotiation process for a new connection */
    async StartConnectionProcess() {
        _runState.get(this).currentlyProcessingHandshake = false;
        await this.InitiateConnection();
    }

    /* -------------------------------------------------------------- */
}

export {
    UINegotiatedPeer,
};
